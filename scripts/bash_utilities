#!/bin/bash

# Define ANSI escape codes as variables
NC="\033[0m"
ENDL="${NC}\n" 

# Color codes
RED="\033[31m"
ORANGE="\033[38;5;208m"
YELLOW="\033[33m"
GREEN="\033[32m"
BLUE="\033[38;5;33m"
INDIGO="\033[38;5;54m"
VIOLET="\033[38;5;93m"

# Extra colors
CYAN="\033[36m"
PINK="\033[38;5;213m"
WHITE="\033[97m"
BLACK="\033[30m"
GRAY="\033[90m"

# Text Styles
UNDERLINE="\033[4m"
ITALIC="\033[3m"           # Limited support
BLINK="\033[5m"            # Limited support
REVERSE="\033[7m"
DIM="\033[2m"
STRIKETHROUGH="\033[9m"    # Limited support

# Function to print a section header
print_header() {
  local header=$1
  local length=${#header}
  local border=$(printf "%-${length}s" " " | sed "s/ /─/g")
  echo ""
  printf "${ORANGE}$header${ENDL}"
  printf "${ORANGE}$border${ENDL}"
}

# Function to print a centered title with a full-width border
print_title() {
  local TITLE="$1"
  local TITLE_UPPER=$(echo "$TITLE" | tr '[:lower:]' '[:upper:]')  # Convert title to uppercase
  local WIDTH=$(tput cols)  # Get the current terminal width
  local TITLE_LEN=${#TITLE_UPPER}
  local BORDER_LEN=$(( (WIDTH - TITLE_LEN - 2) / 2 ))  # Calculate border length for both sides

  # Create the border using the line character
  local BORDER=$(printf "%-${BORDER_LEN}s" " " | sed "s/ /─/g")  # Replace spaces with lines

  # Print the full-width line with the title centered
  printf "${CYAN}${BORDER} ${TITLE_UPPER} ${BORDER} ${ENDL}"
}

# Function to log a message with a timestamp
log_message() {
  local message="$1"
  echo -e "$(echo_cyan "$(date '+%Y-%m-%d %H:%M:%S')") - $message"
}

# Function to handle errors and log a message
handle_error() {
  local exit_code=$1
  local message="$2"
  if [ $exit_code -ne 0 ]; then
    log_message "$message"
    exit $exit_code
  fi
}

# Function to prompt for user confirmation
confirm_action() {
  read -p "$1 (y/n): " -n 1 -r
  echo    # Move to a new line
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    return 1
  fi
  return 0
}

# Function to check if a command is installed
check_dependency() {
  command -v "$1" >/dev/null 2>&1 || { echo >&2 "$(echo_red "Error: $1 is not installed. Please install it.")"; exit 1; }
}

# Function to pause execution for a specified number of seconds
wait_for() {
  local seconds=$1
  log_message "Waiting for $seconds seconds..."
  sleep "$seconds"
}

# Function to log a message and exit with an error
exit_with_message() {
  local message="$1"
  log_message "$message"
  exit 1
}
