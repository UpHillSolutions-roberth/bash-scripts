#!/bin/bash

# Source the utilities file
source "$(dirname "$0")/bash_utilities"

# Logging setup: capture all output to both terminal and log file
LOG_DIR="$HOME/logs"
mkdir -p "$LOG_DIR"  # Create the directory if it doesn't exist
LOGFILE="$LOG_DIR/system_update_$(date +%F_%H-%M-%S).log"  # Log file with timestamp
exec > >(tee -a "$LOGFILE") 2>&1

# Function to display help information
show_help() {
  print_title "HELP INFORMATION"
  print_header "Usage: $(basename "$0") [OPTIONS]"
  echo "This script performs a comprehensive system update on Fedora, including DNF package updates, security updates,"
  echo "cleanup of old packages, updating Flatpak packages, and cleaning up cached package data."
  print_header "Options:"
  echo -e "  $(color_bold_blue "-s, --skip-security")     Skip security updates."
  echo -e "  $(color_bold_blue "-f, --skip-flatpak")      Skip Flatpak updates."
  echo -e "  $(color_bold_blue "-c, --skip-clean-cache")  Skip cleaning the DNF cache."
  echo -e "  $(color_bold_blue "-n, --no-confirm")        Run DNF commands without the '-y' flag to require user confirmation."
  echo -e "  $(color_bold_blue "-h, --help")              Display this help message."
  print_header "Examples:"
  echo -e "  $(color_blue "$(basename "$0")")                      Run the script to perform system updates with auto-confirmation."
  echo -e "  $(color_blue "$(basename "$0") -s")                   Perform system updates without checking for security updates."
  echo -e "  $(color_blue "$(basename "$0") -f")                   Perform system updates without updating Flatpak packages."
  echo -e "  $(color_blue "$(basename "$0") -c")                   Perform system updates without cleaning the DNF cache."
  echo -e "  $(color_blue "$(basename "$0") -n")                   Perform system updates with user confirmation for each DNF operation."
  echo -e "  $(color_blue "$(basename "$0") -s -f -c")             Combine multiple options to skip security updates, Flatpak updates, and DNF cache cleaning."
  exit 0
}

# Default values for options
skip_security=false
skip_flatpak=false
skip_clean_cache=false
auto_confirm=true

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -s|--skip-security)
      skip_security=true
      ;;
    -f|--skip-flatpak)
      skip_flatpak=true
      ;;
    -c|--skip-clean-cache)
      skip_clean_cache=true
      ;;
    -n|--no-confirm)
      auto_confirm=false
      ;;
    -h|--help)
      show_help
      ;;
    *)
      color_red "Unknown option: $1"
      show_help
      ;;
  esac
  shift
done

# Set DNF flags
dnf_flags=""
[ "$auto_confirm" = true ] && dnf_flags="-y"

# Check for and install necessary dependencies
missing_packages=()
for pkg in rpmconf flatpak remove-retired-packages; do
  if ! command -v "$pkg" &> /dev/null; then
    missing_packages+=("$pkg")
  fi
done
if [ ${#missing_packages[@]} -gt 0 ]; then
  echo "Installing missing dependencies: ${missing_packages[*]}"
  sudo dnf install $dnf_flags "${missing_packages[@]}"
  echo "Complete!"
fi

# Starting system updates message
print_title "STARTING SYSTEM UPDATES"
icon="mintupdate-checking"
progress_id=$(dunstify -a "System Update" -p -t 0 "System Update" "Starting system update...")

# Refreshing the DNF cache only if not skipping clean cache
if [ "$skip_clean_cache" = false ]; then
  print_header "Refreshing DNF Cache"
  dunstify -a "System Update" -r "$progress_id" -t 0 -i $icon "System Update" "Refreshing DNF cache..."
  sudo dnf makecache --refresh $dnf_flags
fi

# Update all packages
print_header "Updating DNF Packages"
icon="mintupdate-installing"
dunstify -a "System Update" -r "$progress_id" -t 0 -i $icon "System Update" "Updating DNF Packages..."
temp_file=$(mktemp) # Create a temporary file
script -q -c "sudo dnf update $dnf_flags" "$temp_file" # Redirect output to a temp file
update_output=$(sed '1d;$d' "$temp_file") # Remove first and last line
updated_count=$(echo "$update_output" | grep -cE 'Upgraded|Installed|Updated|Reinstalled')
rm "$temp_file" # Remove the temporary file

# Handle NVIDIA packages
echo
echo "Checking if NVIDIA packages were updated..."
if echo "$update_output" | grep -q -i 'nvidia'; then
    echo "NVIDIA package updates detected. Regenerating initramfs..."
    dunstify -a "System Update" -r "$progress_id" -t 0 -i $icon "System Update" "NVIDIA update detected. Regenerating initramfs..."
    sudo dracut -f --regenerate-all
    echo "Initramfs regeneration complete!"
else
    echo "Nothing to do."
fi

# Handling RPM configuration files
print_header "Handling Leftover RPM Configuration Files"
dunstify -a "System Update" -r "$progress_id" -t 0 -i $icon "System Update" "Handling RPM configuration files..."
echo "Looking for leftover configuration filesâ€¦"
rpmFiles=$(sudo rpmconf -a | tee /dev/tty)
# Check if there was any output
if [ -n "$rpmFiles" ]; then
  echo "$rpmFiles"
  echo "Complete!"
else
  echo "Nothing to do."
fi

# Checking for and installing security updates
if [ "$skip_security" = false ]; then
  print_header "Security Updates"
  dunstify -a "System Update" -r "$progress_id" -t 0 -i $icon "System Update" "Checking for security updates..."
  echo "Looking for security updatesâ€¦"
  # Store the output of the security check
  securityUpdates=$(sudo dnf check-update --security)
  if echo "$securityUpdates" | grep -q "Security"; then
    echo "Installing Security Updates"
    sudo dnf update --security $dnf_flags
    dunstify -a "System Update" -r "$progress_id" -t 0 "System Update" "Installed security updates."
  else
    echo "Nothing to do."
  fi
fi

# Cleaning up old packages
print_header "Cleaning Up Old Packages"
dunstify -a "System Update" -r "$progress_id" -t 0 -i $icon "System Update" "Cleaning up old packages..."
echo "Looking for old packagesâ€¦"
autoRemove=$(sudo dnf autoremove $dnf_flags)
if echo "$autoRemove" | grep -q "Nothing to do"; then
  echo "Nothing to do."
else 
  echo "$autoRemove"
fi

# Updating Flatpak packages and removing unused ones
if [ "$skip_flatpak" = false ]; then
  print_header "Updating Flatpak Packages"
  dunstify -a "System Update" -r "$progress_id" -t 0 -i $icon "System Update" "Updating Flatpak packages..."
  flatpak update $dnf_flags

  print_header "Removing Unused Flatpak Packages"
  dunstify -a "System Update" -r "$progress_id" -t 0 -i $icon "System Update" "Removing unused Flatpak packages..."
  echo "Looking for unused Flatpak packagesâ€¦"
  flatpak uninstall --unused $dnf_flags
fi

# Cleaning up all cached package data
if [ "$skip_clean_cache" = false ]; then
  print_header "Cleaning Up Cached Package Data"
  dunstify -a "System Update" -r "$progress_id" -t 0 -i $icon "System Update" "Cleaning cached package data..."
  sudo dnf clean all
fi

echo
print_title "SYSTEM UPDATES COMPLETED"

# Display notification if updates were found and remove log file if none
if (( updated_count > 0 )); then
  result="$updated_count packages were updated successfully!"
  org_files_by_date -d 90 "$LOG_DIR" > /dev/null 2>&1 # Organize log files by date and remove older than 90 days
  echo "View the log directory: file://$LOG_DIR"
else
  result="No updates found."
  rm "$LOGFILE"
fi

# Check if a reboot is required and set the reboot message
reboot_message=""
icon="mintupdate-up-to-date"
if [ -f /var/run/reboot-required ]; then
  reboot_message="\nA system reboot is required to apply all updates."
  icon="system-reboot"
fi

# Display notification and prompt user for next steps
dunstify -a "System Update" -r "$progress_id" -t 0 -i $icon \
  -A open,"ðŸ“‚ Open Log" \
  -A reboot,"ðŸ”„ Reboot" \
  -A shutdown,"ðŸ’¡ Power-off" \
  "Update Complete" "$result$reboot_message"

# Function to handle actions based on terminal input
handle_terminal_choice() {
  echo "What would you like to do next?"
  color_orange $reboot_message
  color_blue "1. Reboot"
  color_blue "2. Power-off"
  color_blue "3. Exit (Done)"

  read -p "Enter your choice [1-3] (default is 3): " choice
  choice=${choice:-3}  # Default to 3 if no choice is entered

  # Take action based on terminal choice
  case $choice in
    1)
      color_blue "Rebooting system"
      sudo reboot
      ;;
    2)
      color_blue "Powering off system"
      sudo poweroff
      ;;
    3)
      color_blue "Exiting script."
      exit
      ;;
    *)
      color_red "Invalid choice. Please choose 1, 2, or 3."
      ;;
  esac
}

# Function to handle actions based on dunstify response
handle_dunstify_choice() {
  while true; do
    dunst_action=$(dunstctl action "$progress_id" 2>/dev/null)
    case "$dunst_action" in
      open) xdg-open "$LOG_DIR" ;;
      reboot) sudo reboot ;;
      shutdown) sudo poweroff ;;
      *) return ;;
    esac
  done
}

# Start listening to both terminal and notification inputs
handle_terminal_choice &
handle_dunstify_choice &

# Wait for any background process to finish, then kill the other
wait -n
pkill -P $$