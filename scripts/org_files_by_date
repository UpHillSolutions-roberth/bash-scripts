#!/bin/bash

# Source the formatting functions (if applicable)
source "$(dirname "$0")/bash_utilities"

# Function to display help information
show_help() {
  print_title "HELP INFORMATION"
  print_header "Usage: $(basename $0) [OPTIONS] [DIRECTORY]"
  printf "${BLUE}This script organizes files in the specified directory and its subdirectories\n"
  printf "into folders based on their creation date (or modification date if creation\n"
  printf "date is not available). The files will be moved (default) or copied into\n"
  printf "directories named by year and month.${ENDL}"
  
  print_header "Options:"
  printf "${BLUE}  -c${ENDL}         Copy files instead of moving them."
  printf "${BLUE}  -d DAYS${ENDL}    Delete files older than the specified number of days."
  printf "${BLUE}  -h, --help${ENDL} Display this help message."
  
  print_header "Examples:"
  printf "${BLUE}  $(echo "$(basename "$0") -c -d 90 /path/to/directory")  Copy files and delete files older than 90 days.${ENDL}"
  printf "${BLUE}  $(echo "$(basename "$0") /path/to/directory")           Move files to respective folders.${ENDL}"
  exit 0
}


# Function to get the creation date of a file
get_creation_date() {
  stat -c %w "$1" 2>/dev/null | cut -d ' ' -f1
}

# Initialize the copy_files variable
copy_files=false
delete_days=""

# Parse command-line options
while getopts "cd:h-" opt; do
  case $opt in
    c) copy_files=true;;
    d) delete_days="$OPTARG";;
    h) show_help;;
    -)
      case $OPTARG in
        help) show_help;;
        *) printf "${RED}Invalid option: --$OPTARG${ENDL}"; show_help;;
      esac;;
    \?) printf "${RED}Invalid option: -$OPTARG${ENDL}"; show_help;;
  esac
done
shift $((OPTIND - 1))

# Set the target directory
DIRECTORY="${1:-.}"

# Begin operation
print_title "BEGIN FILE ORGANIZATION"
print_header "Organizing files in $DIRECTORY by creation/modification date into Year/Month folders..."

# Loop through all files in the current directory and its subdirectories
find "$DIRECTORY" -type f | while read -r file; do
  creation_date=$(get_creation_date "$file")

  # If the creation date is empty (e.g., for filesystems that do not support birth time), use the modification date
  if [ -z "$creation_date" ]; then
    creation_date=$(stat -c %y "$file" | cut -d ' ' -f1)
  fi

  # Extract the year and month from the creation date
  year=$(echo "$creation_date" | cut -d '-' -f1)
  month=$(echo "$creation_date" | cut -d '-' -f2)

  # Create the target directory if it does not exist
  target_dir="$DIRECTORY/$year/$month"
  mkdir -p "$target_dir"

  # Move or copy the file to the target directory
  if [ "$copy_files" = true ]; then
    cp "$file" "$target_dir" && printf "${GREEN}Copied: $file to $target_dir${ENDL}"
  else
    mv "$file" "$target_dir" && printf "${GREEN}Moved: $file to $target_dir${ENDL}"
  fi
done

# Delete files older than the specified number of days if provided
if [[ -n "$delete_days" ]]; then
  print_header "Deleting files older than $delete_days days in $DIRECTORY"
  find "$DIRECTORY" -type f -mtime +$delete_days -exec rm -f {} \;
fi

# End operation
printf "${GREEN}Complete!${ENDL}"
print_title "FILE ORGANIZATION COMPLETE"
echo "All files in $DIRECTORY have been organized into Year/Month folders."